---
title: "Day 13: Iterative Forecasting and Process Models"
author: "YOUR GROUP NAMES HERE"
format:
  html:
    embed-resources: true
editor: source
---

```{r}
#| echo: false
#| message: false
# Load up libraries and functions:
library(tidyverse)
library(broom)  # You may need to install this package

# Source this file for helpful functions
source('https://raw.githubusercontent.com/jmzobitz/soilflux4cast/refs/heads/main/scripts/forecast_helper_functions.R')

```

```{r}


forecast_variable <- "temperature" ###   # Define the forecast variable you want

### ADDING PARAMETER UNCERTAINTY:
# Pseudocode to write the model:

lm_model <- function(air_temperature ,
  uncertainty = TRUE) {

  # Enter in all parameters:
  p1 <- -241.68694
  p2 <- 0.90317 ## <-- include the value here


  # List each of the parameters, include the uncertainty:
  p1_sd <- 6.16417
  p2_sd <- 0.02088


  if (uncertainty) {
    # List each of parameters, adding on the uncertainty:
    p1 <- p1 + rnorm(1,sd = p1_sd)
    p2 <- p2 + rnorm(1,sd = p2_sd)

  }


  # Write down the formula to compute, using all covariates:
  p1 + p2*air_temperature

}

# Now run the model at each location:
neon_site="BARC"
date_to_forecast <- "2024-01-01"
forecast_variables <- "air_temperature" 

future <- get_forecast_noaa(site = neon_site,
                            forecast_date = date_to_forecast,
                            met_variables = forecast_variables)

glimpse(future)

future_target <- future |>
  group_by(parameter) |> # This is the ensemble value
  nest() |>
  mutate(data = map(.x=data,.f=~mutate(.x,
                                       prediction = lm_model(air_temperature,uncertainty = TRUE) 
  )
  )
  ) |>
  unnest(cols=c(data)) |>
  mutate(variable = forecast_variable) |>
  select(parameter,datetime,family,site_id,reference_datetime,prediction,variable)
```


## YOUR TURN: Analyzing uncertainty
**NOTE:** This assignment builds off Days 11 - 12 and work done in class on Day 13.  Using your model and covariates:

- Compute the process uncertainty.
- Identify the parameter uncertainty.
- Using the target and the information provided in class, what is the initial condition uncertainty?


To do this, you can copy and paste your code from previous assignments, adding in the necessary steps above.  Explain your results outside of the code chunk.

Now re-run your forecast including all the uncertainty.  Compare your forecast from Day 12 (show the forecast plot) to the new one where uncertainty is included.  How did it change / improve / worsen?
```{r}
forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/aquatics-targets.csv.gz"

# then run this line to see your targets

forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)

site_year <- 2024
neon_site <- "BARC"

historical_noaa <- noaa_mean_historical(site = neon_site,
                                        year = site_year)

forecast_variable <- "temperature"

noaa_measurement <- "air_temperature"



regression_formula <- temperature ~ 1 + air_temperature

forecast_fit <- fit_lm_model(target_data = forecast_targets,
                             noaa_data = historical_noaa,
                             regression_equation = regression_formula)


summary(forecast_fit)

broom::augment(forecast_fit)|>
  summarize(sd_process=sd(.resid))
```
```{r}
process_sd <- 2.32 ###  # <---- define your process error
  n_obs <- nrow(future_target)  # This counts the rows

# Now add the process error
future_target$prediction <- future_target$prediction + rnorm(n_obs,sd = process_sd)

# Plot the result:
ggplot(data = future_target) +
  geom_line(aes(x=datetime,y=prediction,group=parameter),alpha=0.4)
```


## YOUR TURN: Expand your forecast!

Now choose either:

(1) a new forecast target variable
(2) a new timeperiod to generate a forecast
(3) parameterize your model over a different timeperiod
(4) a new site to forecast

Rerun all model steps, analyze the different levels of uncertainty, and evaluate your forecast based on the evaluation metrics we discussed in Day 12.
```{r}

forecast_variable <- "temperature" ###   # Define the forecast variable you want

### ADDING PARAMETER UNCERTAINTY:
# Pseudocode to write the model:

lm_model <- function(air_temperature ,
  uncertainty = TRUE) {

  # Enter in all parameters:
  p1 <- -241.68694
  p2 <- 0.90317 ## <-- include the value here


  # List each of the parameters, include the uncertainty:
  p1_sd <- 6.16417
  p2_sd <- 0.02088


  if (uncertainty) {
    # List each of parameters, adding on the uncertainty:
    p1 <- p1 + rnorm(1,sd = p1_sd)
    p2 <- p2 + rnorm(1,sd = p2_sd)

  }


  # Write down the formula to compute, using all covariates:
  p1 + p2*air_temperature

}

# Now run the model at each location:
neon_site="BARC"
date_to_forecast <- "2024-07-01"
forecast_variables <- "air_temperature" 

future <- get_forecast_noaa(site = neon_site,
                            forecast_date = date_to_forecast,
                            met_variables = forecast_variables)

glimpse(future)

future_target <- future |>
  group_by(parameter) |> # This is the ensemble value
  nest() |>
  mutate(data = map(.x=data,.f=~mutate(.x,
                                       prediction = lm_model(air_temperature,uncertainty = TRUE) 
  )
  )
  ) |>
  unnest(cols=c(data)) |>
  mutate(variable = forecast_variable) |>
  select(parameter,datetime,family,site_id,reference_datetime,prediction,variable)



forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/aquatics-targets.csv.gz"

# then run this line to see your targets

forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)

site_year <- 2024
neon_site <- "BARC"

historical_noaa <- noaa_mean_historical(site = neon_site,
                                        year = site_year)

forecast_variable <- "temperature"

noaa_measurement <- "air_temperature"



regression_formula <- temperature ~ 1 + air_temperature

forecast_fit <- fit_lm_model(target_data = forecast_targets,
                             noaa_data = historical_noaa,
                             regression_equation = regression_formula)


summary(forecast_fit)

broom::augment(forecast_fit)|>
  summarize(sd_process=sd(.resid))


process_sd <- 2.32 ###  # <---- define your process error
  n_obs <- nrow(future_target)  # This counts the rows

# Now add the process error
future_target$prediction <- future_target$prediction + rnorm(n_obs,sd = process_sd)

# Plot the result:
ggplot(data = future_target) +
  geom_line(aes(x=datetime,y=prediction,group=parameter),alpha=0.4)

```

## YOUR TURN: Process models
In class I showed a prompt that explores a possible process model. Copy and paste your prompt with the results below (make sure there are citations!)


