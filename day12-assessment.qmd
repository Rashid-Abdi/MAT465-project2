---
title: "Day 12: Evaluating Forecasts to  Improve Decision Making"
author: "Rashid, Meng, Jeffrey"
format:
  html:
    embed-resources: true
editor: source
---

**NOTE:** Steps 1 - 6 are similar to what you have prepared for the Day 11 Homework - I include it here for reproducibility.

## Step 0: Preliminiaries
Load in the correct forecast targets, based on what you are forecasting. Uncomment the correct lines. You can delete the other forecast targets to save space.
```{r}
#| echo: false
#| message: false

library(tidyverse)

# Source this file for helpful functions
source('https://raw.githubusercontent.com/jmzobitz/soilflux4cast/refs/heads/main/scripts/forecast_helper_functions.R')

# Depending on which forecast you are working, uncomment and run the following lines
##
### BEETLES
# # Download the targets:
# forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1W/beetles-targets.csv.gz"
# forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)


### AQUATICS
# # Download the targets:
forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/aquatics-targets.csv.gz"
forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)

### PHENOLOGY
# # Download the targets:
# forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/phenology-targets.csv.gz"
# forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)

### FLUXES
# # Download the targets:
# forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/terrestrial_daily-targets.csv.gz"
# forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)

```

## Step 1: Get forecast targets

First let's record information about what you are forecasting. For the Ecological Forecast challenge, "targets" refer to what you are forecasting. The Ecological Forecasting Challenge selects focal sites where forecasts are evaluate. 

- "duration" is the time-step of the variable where `P1D` is a daily mean, and `P1W` is a weekly total.
- The "forecast horizon" is the number of days-ahead that we want you to forecast.
- The "latency" is the time between data collection and data availability in the target file
- focal sites: are the places where (for today) we will be building models

Please navigate to [What to Forecast](https://projects.ecoforecast.org/neon4cast-ci/targets.html) and for your theme, complete the following your team has selected:

- Targets: Temperature, oxygen, chla
- Duration: P1D
- Forecast horizon: 30
- Latency: 3
- Focal sites: BARC, CRAM


Explain what the targets measure (with units!):

TYPE YOUR RESPONSE HERE
Temperature: This target simply measures how cold/warm the water is. It is measured in degrees celsius (C).
Oxygen: This target measures the amount of oxygen that is dissolved in the water, this is important for animals in the water to use. This is measured by milligrams of oxygen per liter of water.
Chla: This target measures the concentration of chlorophyll in the water. Used as an indicator for algae or phytoplankton biomass. This is measured in micrograms per liter.

YOUR TURN: Load in the targets for your theme:

```{r}
forecast_url <- "https://sdsc.osn.xsede.org/bio230014-bucket01/challenges/targets/project_id=neon4cast/duration=P1D/aquatics-targets.csv.gz"

# then run this line to see your targets
forecast_targets <- read_csv(forecast_url, show_col_types = FALSE)
aquatics_focal_sites <- "BARC"

glimpse(forecast_targets)

forecast_targets |> 
  filter(site_id %in% aquatics_focal_sites) |> 
  ggplot(aes(x = datetime, y = observation)) +
  geom_point() +
  facet_grid(variable~site_id, scales = "free_y") +
  theme_bw()
```

## Step 1b: Visualizing targets

YOUR TURN: For each of your forecast targets, produce the code that visualizes each target over the course of 1-2 years:

```{r}
# TYPE YOUR RESPONSE HERE
forecast_variable <- "temperature"
neon_site <- "BARC"
site_year <- 2024

plot_targets(target_data = forecast_targets,
            measurement = forecast_variable,
            site = neon_site,
            year = site_year)

forecast_variable2 <- "oxygen"

plot_targets(target_data = forecast_targets,
            measurement = forecast_variable2,
            site = neon_site,
            year = site_year)

forecast_variable3 <- "chla"

plot_targets(target_data = forecast_targets,
            measurement = forecast_variable3,
            site = neon_site,
            year = site_year)

```

## Step 2: Get historical weather data

The next step is to visualize the effect of environmental variables on your targets to see if there are any possible relationships to explore.  We use the historical weather data:

- `air_temperature` (K)
- `air_pressure` (Pa)
- `relative_humidity` (proportion)
- `surface_downwelling_longwave_flux_in_air` (W/m^2)
- `surface_downwelling_shortwave_flux_in_air` (W/m^2) 
- `precipitation_flux` (kg/(m^2 s))
- `eastward_wind` (m/s)
- `northward_wind` (m/s)

YOUR TURN: Acquire the historical NOAA data for your site

```{r}
# TYPE YOUR RESPONSE HERE

historical_noaa <- noaa_mean_historical(site = neon_site,
                                        year = site_year)

```

## Step 2b: Visualize historical weather data

YOUR TURN: Plot some NOAA environmental variables:
```{r}
# TYPE YOUR RESPONSE HERE
noaa_measurements <- c(
  "air_temperature",
  "air_pressure",
  "relative_humidity",
  "surface_downwelling_longwave_flux_in_air",
  "surface_downwelling_shortwave_flux_in_air",
  "precipitation_flux",
  "eastward_wind",
  "northward_wind"
)

for (m in noaa_measurements) {
  print(plot_noaa(noaa_data = historical_noaa, measurement = m, site = neon_site))
}
```

What patterns do you see? How do you imagine they affect your target?

TYPE YOUR RESPONSE HERE

## Step 3: Explore covariates

YOUR TURN: For each of the covariates you have identified, display the scatterplot.

```{r}
# TYPE YOUR RESPONSE HERE
forecast_variables <- c(forecast_variable, forecast_variable2, forecast_variable3)

# I (Jeffrey) did have some help from chat to help me compress the previous code I wrote
for (f in forecast_variables) {
  for (n in noaa_measurements) {
    suppressMessages(
      suppressWarnings(
        print(plot_target_noaa(
          target_data = forecast_targets,
          noaa_data = historical_noaa,
          noaa_variable = n,
          target_variable = f
        ))
      )
    )
  }
}

```

## Step 4: Define regression model

YOUR TURN: Create the formula for your (linear) regression model for the target, and then create a model structure that fits the data.

```{r}
# TYPE YOUR RESPONSE HERE

# You will need to code this in and uncomment it
# Chose these two because there was a somewhat strong linear relationship seen
regression_formula <- temperature ~ 1 + air_temperature + surface_downwelling_longwave_flux_in_air

forecast_fit <- fit_lm_model(target_data = forecast_targets,
                             noaa_data = historical_noaa,
                             regression_equation = regression_formula)


summary(forecast_fit)


```

YOUR TURN: How would you evaluate the regression fit, especially compared to the visualization of the targets with each covariate?

## Step 5: Acquire "future" forecast data
The next thing we need to do is to define a date, and then acquire what the future NOAA forecasts from the previous day.  We make the forecasts beginning the day previous and then forecast into the future. 

YOUR TURN: Select a day (preferably not recently), and then acquire the NOAA forecasts for that day:

```{r}

date_to_forecast <- "2024-01-01"   
forecast_variables <- c("air_temperature", "surface_downwelling_longwave_flux_in_air")

future <- get_forecast_noaa(site = neon_site,
                             forecast_date = date_to_forecast,
                             met_variables = forecast_variables)

glimpse(future)
```

The output data table for `future` has the following structure:

- `parameter`: ensemble member number
- `datetime`: datetime of forecast
- `variable`:  weather variable
- `prediction`: forecasted value
- `family`: class of uncertainty (ensemble)
- `site_id`: string : NEON site ID
- `reference_datetime`: datetime of horizon 0 (the previous day)


## Step 6: Forecast
Now we are ready to evaluate the future NOAA data to our forecast model.  

YOUR TURN: Assuming you have all the previous steps defined, all you need to do is uncomment the appropriate code:

```{r}
future_target <- make_prediction(noaa_future = future,
                                  fit_model = forecast_fit,
                                  target_variable = forecast_variable)

glimpse(future_target)
```


## Step 6b: Visualize forecasts
Let's take a look at each of the ensemble forecasts. 

YOUR TURN: Assuming you have all the previous steps defined, all you need to do is uncomment the appropriate code:

```{r}

ggplot(data = future_target) +
  geom_line(aes(x=datetime,y=prediction,group=parameter),alpha=0.4) +
  ylab(forecast_variable) +
  ggtitle(neon_site)

```

YOUR TURN: How do you think your forecast does?  What happens to the spread of the forecast as time goes on?

## Step 7: Evaluate Forecast 

Your step is to apply the functions `compute_forecast_stats` and `compute_reliability` to evaluate the forecasting you created.  You must include the following:

- A plot of your forecast-observation pairs over time.
```{r}
#compute_forecast_stats
forecast_future <- future_target
forecast_eval <- compute_forecast_stats(future_target,forecast_targets)

glimpse(forecast_eval)

 forecast_name <- forecast_eval$variable |> unique()
site_name <- forecast_eval$site_id |> unique()

forecast_eval |>
  ggplot(aes(x=datetime)) +
  geom_line(aes(y=q0.5)) +
  geom_ribbon(aes(ymin=q0.025,ymax=q0.975),alpha=0.3) +
  geom_point(aes(y=observation)) +
  ylab(forecast_name) +
  ggtitle(site_name)
```

- A plot of the CRPS over time.
```{r}
forecast_eval |>
  mutate(horizon = as.numeric(as_date(datetime) - as_date(reference_datetime)) ) |>
  ggplot(aes(x=horizon,y=crps)) +
  geom_point() +
  geom_line() +
  ggtitle(site_name) +
  xlab("Forecast horizon (days)")
```

- Evaluation of the forecast accuracy, precision, and reliability.  Any text should support what is shown in the previous two plots.
```{r}
# Finally, compute the reliability:
compute_reliability(forecast_eval)
```

- A recommendation of how to improve forecast accuracy, precision, and reliability.
```{r}
#The confidence interval in this forecast is too wide, indicating high uncertainty. I recommend reducing Initial Conditions Uncertainty by collecting more recent and frequent lake temperature observations before running the forecast. This would provide a more accurate starting point and narrow the confidence interval over time.

#Another way to improve this forecast is to include additional meteorological drivers like solar radiation, wind speed, and humidity. This would reduce process uncertainty by allowing the model to better represent how environmental factors influence lake temperature.
```


## Step 8: Try something new!

Now choose either (1) a new forecast target variable or (2) new timeperiod to generate a forecast.  Evaluate your forecast based on the evaluation metrics we discussed in class.
```{r}

future_target <- make_prediction(noaa_future = future,
                                  fit_model = forecast_fit,
                                  target_variable = forecast_variable2)
ggplot(data = future_target) +
  geom_line(aes(x=datetime,y=prediction,group=parameter),alpha=0.4) +
  ylab(forecast_variable) +
  ggtitle(neon_site)

#compute_forecast_stats
forecast_future <- future_target
forecast_eval <- compute_forecast_stats(future_target,forecast_targets)

glimpse(forecast_eval)

forecast_name <- forecast_eval$variable |> unique()
site_name <- forecast_eval$site_id |> unique()

forecast_eval |>
  ggplot(aes(x=datetime)) +
  geom_line(aes(y=q0.5)) +
  geom_ribbon(aes(ymin=q0.025,ymax=q0.975),alpha=0.3) +
  geom_point(aes(y=observation)) +
  ylab(forecast_name) +
  ggtitle(site_name)

forecast_eval |>
  mutate(horizon = as.numeric(as_date(datetime) - as_date(reference_datetime)) ) |>
  ggplot(aes(x=horizon,y=crps)) +
  geom_point() +
  geom_line() +
  ggtitle(site_name) +
  xlab("Forecast horizon (days)")

compute_reliability(forecast_eval)


# The oxygen forecast at BARC showed low accuracy, precision, and reliability. Only 27 % of observed values were captured within the forecast interval, and the CRPS values indicate substantial uncertainty. The main issue is that the model used meteorological predictors suited for temperature, not oxygen. Including relevant biological and physical variables like water temperature, sunlight, and chlorophyll would significantly improve performance.
```

